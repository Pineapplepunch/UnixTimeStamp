import tkinter as tk
from tkinter import ttk,font,messagebox
from tkcalendar import Calendar, DateEntry
from datetime import datetime,timedelta
import os
from pyglet import font
import pytz
from pystray import MenuItem as item,Icon as icon

from base64 import b64decode
import io
from PIL import Image,ImageTk

#https://www.cufonfonts.com/font/helvetica-neue-55


font.add_file('UniSansDemo-ThinCAPS.otf')#Uni Sans Thin CAPS
font.add_file('UniSansDemo-HeavyCAPS.otf')#Uni Sans Thick CAPS

b64_encoded_icon=b''
#used colour picker
D_Blue = '#5562E8'
D_Body = '#313338'
D_Window = '#1E1F22'
D_Hover = '#2D2E33'
D_Title = '#949BA4'
D_Font = '#FFFFFF'
D_Default_Font = ('Uni Sans Demo Thin CAPS',12)

TIMEZONES = {
    'CST -6':pytz.timezone('CST6CDT'),#'CST':pytz.timezone('America/Chicago'),
    'MST -7':pytz.timezone('MST7MDT'),#'MST':pytz.timezone('Canada/Mountain'),
    'PST -8':pytz.timezone('PST8PDT'), 
    'UTC -0':pytz.timezone('UTC'),
}

FORMATS = {
    'Short Time'     :["%I:%M %p"             ,'t'],
    'Long Time'      :["%I:%M:%S %p"          ,'T'],
    'Short Date'     :["%d/%m/%Y"             ,'d'],
    'Long Date'      :["%B %d, %Y"            ,'D'],
    'Short Date+Time':["%B %d, %Y %I:%M %p"   ,'f'],
    'Long Date+Time' :["%A %B %d, %Y %I:%M %p",'F'],
    'Relative Time'  :['in x (time) or x (time) ago','R'],
}
#<a href="https://www.flaticon.com/free-icons/clock" title="clock icons">Clock icons created by dmitri13 - Flaticon</a>

class HoverButton(tk.Button):#(activebackground='',activeforeground='')
    def __init__(self,master,**kw):
        tk.Button.__init__(self,master=master,**kw)
        self.defaultBackground= self['background']
        self.defaultForeground= self['foreground']
        self.bind('<Enter>',self.on_enter)
        self.bind('<Leave>',self.on_leave)        
    def on_enter(self,event):
        self['background'] = self['activebackground']
        self['foreground'] = self['activeforeground']
    def on_leave(self,event):
        self['background'] = self.defaultBackground
        self['foreground'] = self.defaultForeground



class windowless_widget(tk.Frame):
    def __init__(self,master=None):
        tk.Frame.__init__(self,master)
        self.bg=D_Window
        self.master=master
        self.pack(fill=tk.BOTH,expand=1)
        
        self.tray_icon=Image.open(io.BytesIO(b64decode(b64_encoded_icon)))
        self.menu = (item(text='Show',action=self.show_application,default=True),item('Quit',self.quit_application))
        
        self.topbar = tk.Frame(self,height=21,bg=D_Window)
        self.topbar.pack(fill='x')
        self.exitButton = HoverButton(self.topbar,font=('Uni Sans Demo Thin CAPS',10),\
                                      text='✕',relief='flat',bg=D_Window,fg=D_Title,\
                                      activebackground='Red',activeforeground='White',\
                                      command=self.exit)
        self.minimizeButton = HoverButton(self.topbar,font=('Uni Sans Demo Thin CAPS',10),\
                                          text=u'\u23AF',relief='flat',bg=D_Window,fg=D_Title,\
                                          activebackground='#282b30',activeforeground='White',\
                                          command=self.withdraw_to_tray)
        self.refreshButton = HoverButton(self.topbar,font=('Uni Sans Demo Thin CAPS',10),\
                                         text='⟳',relief='flat',bg=D_Window,fg=D_Title,\
                                         activebackground='#282b30',activeforeground='White',\
                                         command=self.refresh_datetime)
        self.AppTitle = tk.Label(self.topbar,text='Timestamper',bg=D_Window,fg=D_Title,font=('Uni Sans Heavy CAPS',10))
        self.AppTitle.pack(side=tk.LEFT)
        self.exitButton.pack(side='right',fill='y')
        self.minimizeButton.pack(side='right',fill='y')
        self.refreshButton.pack(side='right',fill='y')
        
        self.topbar.bind('<ButtonPress-1>',self.startMove)
        self.topbar.bind('<ButtonRelease-1>',self.endMove)
        self.topbar.bind('<Button1-Motion>',self.inMotion)
        
        self.AppTitle.bind('<ButtonPress-1>',self.startMove)
        self.AppTitle.bind('<ButtonRelease-1>',self.endMove)
        self.AppTitle.bind('<Button1-Motion>',self.inMotion)
        
        self.createInterface()

    #move window
    def startMove(self,event):
        self.x = event.x
        self.y = event.y
    def endMove(self,event):
        self.x=None
        self.y=None   
    def inMotion(self,event):
        deltaX=event.x - self.x
        deltaY=event.y - self.y
        x = self.master.winfo_x()+deltaX
        y = self.master.winfo_y()+deltaY
        self.master.geometry(f'+{x}+{y}')
    def exit(self):
        self.master.destroy()
        os._exit(0)
    
    
    def quit_application(self,icon,item):
        self.tray_iconify.stop()
        self.master.destroy()
        os._exit(0)
        
    def show_application(self,icon,item):
        self.tray_iconify.stop()
        self.master.after(0,self.master.deiconify)
        
    def withdraw_to_tray(self):
        self.master.withdraw()
        self.tray_iconify = icon('Discord Time Converter', self.tray_icon,"Discord Time Converter",self.menu)
        
        self.tray_iconify.run()
    
    def refresh_datetime(self):
        self.hour_spinner.set(f'{datetime.now().hour:02.0f}')
        self.minute_spinner.set(f'{datetime.now().minute:02.0f}')
        self.calendar.set_date(datetime.now())
        self.option_changed(None)
        
    def createInterface(self):
        ###VARIABLE DECLARATIONS
        self.hourstr = tk.StringVar(self,'01')
        self.minstr = tk.StringVar(self,'00')
        self.last_value=""
        self.last_hour=""
        self.minstr.trace('w',self.trace_mins)
        self.hourstr.trace('w',self.trace_hours)
        
        style = ttk.Style()
        style.theme_use('default')
        style.configure("TCombobox",
                        fieldbackground=D_Body,
                        readonlyfieldbackground=D_Body,
                        background=D_Blue,
                        selectbackground=D_Blue,
                        foreground='White',
                        relief='flat',
                        arrowcolor='white',
                        bordercolor=D_Body,
                        troughcolor=D_Body,
                        borderwidth=0
                        )
        style.configure("TSpinbox",
                        fieldbackground=D_Body,
                        background=D_Blue,
                        selectbackground=D_Blue,
                        foreground='White',
                        relief='flat',
                        arrowcolor='white',
                        bordercolor=D_Body,
                        troughcolor=D_Body,
                        borderwidth=0
                        )
        self.master.option_add("*TCombobox*Listbox*Font", D_Default_Font)
        self.master.option_add("*TCombobox*Listbox*Background", D_Hover)
        self.master.option_add("*TCombobox*Listbox*Foreground", 'white')
        
        style.map('Cust.TCombobox',
            fieldbackground=[
                ('readonly',D_Body),
            ]
        )
        style.map('Cust.TSpinbox',
            fieldbackground=[
                ('readonly',D_Body),
            ]
        )
        #self.master.option_add("*TCombobox*Listbox*SelectBackground", '#7289da')
        #self.master.option_add("*TCombobox*Listbox*SelectForeground", 'White')
        
        ###TKCalendar Declaration
        self.calendar = DateEntry(self,width=18,font=D_Default_Font,\
                                  date_pattern='dd-mm-y',\
                                  bg=D_Body,fg=D_Window,\
                                  tooltipbackground=D_Window,tooltipforeground='White',
                                  headersbackground=D_Hover,headersforeground='White',\
                                  normalbackground=D_Body,normalforeground='White',\
                                  weekendbackground=D_Body,weekendforeground='White',\
                                  selectbackground=D_Blue,selectforeground='White',\
                                  firstweekday='sunday',\
                                  showweeknumbers=False,\
                                  showothermonthdays=False,\
                                  borderwidth=0,
                                  justify='center',relief='flat')
        self.calendar.bind("<<DateEntrySelected>>",self.option_changed)
        
        ###TIME INPUTS
        self.tframe = tk.Frame(self,bg=D_Body)
        self.hour_spinner = ttk.Spinbox(self.tframe,style='Cust.TSpinbox',\
                                        font=D_Default_Font,\
                                        textvariable=self.hourstr,width=2,from_=0,to=23,\
                                        wrap=True,state='readonly',format='%02.0f',\
                                        command=lambda e=None:self.option_changed(e))
        self.minute_spinner = ttk.Spinbox(self.tframe,style='Cust.TSpinbox',\
                                        font=D_Default_Font,\
                                        textvariable=self.minstr,width=2,from_=0,to=59,\
                                        state='readonly',wrap=True,format='%02.0f',\
                                        command=lambda e=None: self.option_changed(e))
        self.timezone = ttk.Combobox(self.tframe,style='Cust.TCombobox',font=D_Default_Font,width=10,state='readonly',values=list(TIMEZONES.keys()))
        self.timezone.bind("<<ComboboxSelected>>",self.option_changed)

        #self.ampm = ttk.Combobox(self.tframe,style='Cust.TCombobox',font=('Uni Sans Thin CAPS',12),width=4,state='readonly',values=("AM","PM"))
        #self.ampm.bind("<<ComboboxSelected>>",self.option_changed)
        
        ###SELECT FORMAT
        self.datetimeformat = ttk.Combobox(self,style='Cust.TCombobox',font=D_Default_Font,state='readonly',values=list(FORMATS.keys()),justify='center')
        self.datetimeformat.bind("<<ComboboxSelected>>",self.option_changed)
        

        ##SET VALUE OF NOW
        self.timezone.set('MST -7')
        self.hour_spinner.set(f'{datetime.now().hour:02.0f}')
        self.minute_spinner.set(f'{datetime.now().minute:02.0f}')
        self.datetimeformat.set('Short Date+Time') 
        dt = datetime(self.calendar.get_date().year,self.calendar.get_date().month,self.calendar.get_date().day,int(self.hourstr.get()),int(self.minstr.get()),0)
        
        
        
        ###RESULTS
        self.formatted_text = tk.Label(self,relief='flat',font=D_Default_Font,\
                                       bg=D_Body,fg='White',text=dt.astimezone(TIMEZONES[self.timezone.get()]).strftime("%B %d, %Y %I:%M %p"))
        self.timestamp = tk.Entry(self,relief='flat',font=(D_Default_Font,12),\
                                  readonlybackground=D_Body,fg='White',state='readonly',justify='center')

        
        ###PACKING WIDGETS
        self.calendar.pack(side=tk.TOP,fill=tk.X,expand=1)
        self.tframe.pack(side=tk.TOP,fill='x',expand=1)
        self.hour_spinner.pack(side=tk.LEFT)
        tk.Label(self.tframe,relief='flat',bg=D_Body,font=D_Default_Font,fg='white',text=":").pack(side=tk.LEFT)
        self.minute_spinner.pack(side=tk.LEFT)
        self.timezone.pack(side=tk.LEFT,fill='x',expand=1,padx=(10,0))
        #self.ampm.pack(side=tk.LEFT,fill='x',expand=1)
        self.datetimeformat.pack(side=tk.TOP,fill=tk.X,expand=1)
        tk.Label(self,relief='flat',font=D_Default_Font,bg=D_Body,fg='White',text='Shows as:').pack(side=tk.TOP,fill='x',expand=1)
        self.formatted_text.pack(side=tk.TOP,fill='x',expand=1)
        tk.Label(self,relief='flat',font=D_Default_Font,bg=D_Body,fg='White',text='Unix Epoch:').pack(side=tk.TOP,fill='x',expand=1)
        self.timestamp.pack(side=tk.TOP,fill='x',expand=1)
        
        ###UPDATE RESULTS
        
        self.option_changed(None)
    
    #Input : User selects formatting type
    #Output: 
    #   -A formatted string of the Datetime based off of selections
    #   -the format character for discords unix epoch statement
    def option_changed(self,event):                
        dt = datetime(self.calendar.get_date().year,self.calendar.get_date().month,self.calendar.get_date().day,int(self.hourstr.get()),int(self.minstr.get()),0)
        
        if self.datetimeformat.get()=='Relative Time':
            self.formatted_text.config(text= FORMATS[self.datetimeformat.get()][0])
        else:
            self.formatted_text.config(text = dt.astimezone(TIMEZONES[self.timezone.get()]).strftime(FORMATS[self.datetimeformat.get()][0]))
        self.ext= FORMATS[self.datetimeformat.get()][1]
        self.timestamp_modified()
    
    #Input : Called when datetime has been modified
    #Output: Unix Epoch Timestamp copied into users clipboard
    def timestamp_modified(self):
        #print(int(self.hourstr.get()) if self.ampm.get()=='AM' else int(self.hourstr.get())+12)
        dt = datetime(self.calendar.get_date().year,self.calendar.get_date().month,self.calendar.get_date().day,int(self.hourstr.get()),int(self.minstr.get()),0)
        
        self.timestamp.config(state='normal')
        self.timestamp.delete(0,'end')
        self.timestamp.insert(10,f'<t:{str(dt.astimezone(TIMEZONES[self.timezone.get()]).timestamp()).split(".")[0]}:{self.ext}>')
        self.timestamp.config(state='readonly')
        self.master.clipboard_clear()
        self.master.clipboard_append(f'<t:{str(dt.astimezone(TIMEZONES[self.timezone.get()]).timestamp()).split(".")[0]}:{self.ext}>')
    
    
    
    #Input : Incremented or Decremented Minute
    #Output: 
    #   -Hour will be incremented/decremented based on Minute
    def trace_mins(self,*args):
        if self.last_value=='59' and self.minstr.get()=='00':
            self.hourstr.set(int(self.hourstr.get())+1 if self.hourstr.get() !="23" else 0)
        if self.last_value=='00' and self.minstr.get()=='59':
            self.hourstr.set(int(self.hourstr.get())-1 if self.hourstr.get() !='00' else 23)
        self.last_value = self.minstr.get()
   
    #Input : Incremented or Decremented Hour
    #Output: 
    #   -Date will be incremented/decremented based on Hour
    def trace_hours(self,*args):
        if self.last_hour=='23' and self.hourstr.get()=='00':
            self.calendar.set_date(datetime(self.calendar.get_date().year,self.calendar.get_date().month,self.calendar.get_date().day+1))
        if self.last_hour=='00' and self.hourstr.get()=='23':
            self.calendar.set_date(datetime(self.calendar.get_date().year,self.calendar.get_date().month,self.calendar.get_date().day-1))
        self.last_hour=self.hourstr.get()
    
if __name__=="__main__":
    root = tk.Tk()
    root.resizable(1,1)
    root.geometry('320x186')#width x height
    root.title("")
    root.overrideredirect(1)
    root.attributes('-topmost',True)
    
    app = windowless_widget(root)
    app.mainloop()